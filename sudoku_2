import java.util.Random;
import java.util.Scanner;

public class Sudoku {
    private int[][] board;
    private int[][] puzzle;
    private final int size = 9;
    private final int SUBGRID = 3;

    public Sudoku() {
        board = new int[size][size];
        puzzle = new int[size][size];
        generateSudoku();
    }

    private void generateSudoku() {
        fillDiagonal();
        fillRemaining(0, SUBGRID);
        copyBoard();         // Save the full solution
        removeCells(40);     // Make a puzzle
    }

    private void copyBoard() {
        for (int i = 0; i < size; i++) {
            System.arraycopy(board[i], 0, puzzle[i], 0, size);
        }
    }

    private void fillDiagonal() {
        for (int i = 0; i < size; i += SUBGRID) {
            fillBox(i, i);
        }
    }

    private void fillBox(int row, int col) {
        Random rand = new Random();
        int num;
        for (int i = 0; i < SUBGRID; i++) {
            for (int j = 0; j < SUBGRID; j++) {
                do {
                    num = rand.nextInt(9) + 1;
                } while (!isUnusedInBox(row, col, num));
                board[row + i][col + j] = num;
            }
        }
    }

    private boolean isUnusedInBox(int rowStart, int colStart, int num) {
        for (int i = 0; i < SUBGRID; i++) {
            for (int j = 0; j < SUBGRID; j++) {
                if (board[rowStart + i][colStart + j] == num)
                    return false;
            }
        }
        return true;
    }

    private boolean fillRemaining(int i, int j) {
        if (j >= size && i < size - 1) {
            i++;
            j = 0;
        }
        if (i >= size && j >= size)
            return true;

        if (i < SUBGRID) {
            if (j < SUBGRID)
                j = SUBGRID;
        } else if (i < size - SUBGRID) {
            if (j == (i / SUBGRID) * SUBGRID)
                j += SUBGRID;
        } else {
            if (j == size - SUBGRID) {
                i++;
                j = 0;
                if (i >= size)
                    return true;
            }
        }

        for (int num = 1; num <= size; num++) {
            if (isSafe(i, j, num)) {
                board[i][j] = num;
                if (fillRemaining(i, j + 1))
                    return true;
                board[i][j] = 0;
            }
        }
        return false;
    }

    private boolean isSafe(int i, int j, int num) {
        return isRowSafe(i, num) && isColSafe(j, num) && isUnusedInBox(i - i % SUBGRID, j - j % SUBGRID, num);
    }

    private boolean isRowSafe(int i, int num) {
        for (int j = 0; j < size; j++) {
            if (board[i][j] == num)
                return false;
        }
        return true;
    }

    private boolean isColSafe(int j, int num) {
        for (int i = 0; i < size; i++) {
            if (board[i][j] == num)
                return false;
        }
        return true;
    }

    private void removeCells(int count) {
        Random rand = new Random();
        while (count > 0) {
            int i = rand.nextInt(size);
            int j = rand.nextInt(size);
            if (board[i][j] != 0) {
                board[i][j] = 0;
                count--;
            }
        }
    }

    public void printBoard() {
        String line = "|----|----|----|----|----|----|----|----|----|";
        for (int i = 0; i < size; i++) {
            System.out.println(line);
            for (int j = 0; j < size; j++) {
                System.out.print("| ");
                if (board[i][j] == 0)
                    System.out.print("  ");
                else
                    System.out.print(board[i][j] + " ");
            }
            System.out.println("|");
        }
        System.out.println(line);
    }

    public boolean isComplete() {
        for (int i = 0; i < size; i++)
            for (int j = 0; j < size; j++)
                if (board[i][j] == 0 || board[i][j] != puzzle[i][j])
                    return false;
        return true;
    }

    public void playGame() {
        Scanner scanner = new Scanner(System.in);

        while (!isComplete()) {
            printBoard();
            System.out.println("\nEnter your move (row [1-9], column [1-9], value [1-9]): ");
            System.out.print("Enter row: ");
            int row = scanner.nextInt() - 1;
            System.out.print("Enter column: ");
            int col = scanner.nextInt() - 1;
            System.out.print("Enter value: ");
            int value = scanner.nextInt();

            if (row < 0 || row >= 9 || col < 0 || col >= 9 || value < 1 || value > 9) {
                System.out.println(" Invalid input! Please enter values between 1 and 9.");
            } else if (board[row][col] != 0) {
                System.out.println("That cell is already filled. Try again.");
            } else if (puzzle[row][col] == value) {
                board[row][col] = value;
                System.out.println("Cheering! Correct move!\n");
            } else {
                System.out.println("Oops! That's not the correct value. Try again.\n");
            }
        }

        System.out.println("\n Congratulations! You completed the Sudoku!");
        printBoard();
        scanner.close();
    }

    public static void main(String[] args) {
        Sudoku sudoku = new Sudoku();
        System.out.println("Welcome to Sudoku Interactive!");
        sudoku.playGame();
    }
}
